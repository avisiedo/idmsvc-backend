// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
